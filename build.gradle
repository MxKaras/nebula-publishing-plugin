buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:nebula-bintray-plugin:2.2.4'
    }
}

plugins {
    id 'groovy'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'nebula.contacts' version '2.2.0'
    id 'nebula.nebula-release' version '2.2.6'
    id 'nebula.optional-base' version '2.2.2'
    id 'com.gradle.plugin-publish' version '0.9.1'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'org.ysb33r.gradletest' version '0.5.4'
}

apply plugin: 'nebula.nebula-bintray'

description 'Gradle plugin to ease use of ivy-publish and maven-publish'
group = 'com.netflix.nebula'

contacts {
    'justin@halfempty.org' {
        moniker 'Justin Ryan'
        github 'quidryan'
    }
    'rob.spieldenner@gmail.com' {
        moniker 'Rob Spieldenner'
        github 'rspieldenner'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    jcenter()
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    compile 'com.netflix.nebula:nebula-core:2.2.0'
    compile 'com.netflix.nebula:gradle-info-plugin:2.2.2', optional
    compile 'com.netflix.nebula:gradle-contacts-plugin:2.2.0', optional
    testCompile('com.netflix.nebula:nebula-test:3.0.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile gradleTestKit()
    testCompile('org.spockframework:spock-core:1.0-groovy-2.3') {
        exclude group: 'org.codehaus.groovy'
    }
    testRuntime files(tasks.createClasspathManifest)
}

test {
    maxHeapSize = '1g'
    maxParallelForks = Math.max(Runtime.runtime.availableProcessors() - 2, 1)
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/nebula-publishing-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/nebula-publishing-plugin.git'
    description = 'Plugins to ease maven-publish and ivy-publish configuration'

    plugins {
        apacheLicensePom {
            id = 'nebula.maven-apache-license'
            displayName = 'Nebula Maven Apache License Plugin'
            description = 'Add the Apache v2 license to the pom'
            tags = ['nebula', 'publish', 'maven', 'apache', 'license']
        }

        manifestPom {
            id = 'nebula.maven-manifest'
            displayName = 'Nebula Maven Manifest Plugin'
            description = 'Append additional information from our info plugin to the properties section of the pom'
            tags = ['nebula', 'publish', 'maven']
        }

        mavenBasePublishing {
            id = 'nebula.maven-base-publish'
            displayName = 'Nebula Maven Base Publishing Plugin'
            description = 'Add a name and description element to the published POM'
            tags = ['nebula', 'publish', 'maven']
        }

        mavenJavaPublishing {
            id = 'nebula.maven-dependencies'
            displayName = 'Nebula Maven Java Publishing Plugin'
            description = 'Add component.war if a war project, add component.java otherwise, add dependencies'
            tags = ['nebula', 'publish', 'maven']
        }

        mavenPublishing {
            id = 'nebula.maven-publish'
            displayName = 'Nebula Maven Publishing Plugin'
            description = 'Applies our opinions for maven publications'
            tags = ['nebula', 'publish', 'maven']
        }

        resolvedPom {
            id = 'nebula.maven-resolved-dependencies'
            displayName = 'Nebula Resolved Pom Plugin'
            description = 'Built on top of nebula.maven-publish, replacing dynamic versions with the actual resolved versions'
            tags = ['nebula', 'publish', 'maven']
        }

        scmPom {
            id = 'nebula.maven-scm'
            displayName = 'Nebula SCM Pom Plugin'
            description = 'Adds SCM info to the pom'
            tags = ['nebula', 'publish', 'maven']
        }

        javadocJar {
            id = 'nebula.javadoc-jar'
            displayName = 'Nebula Javadoc Jar Publishing plugin'
            description = 'Create a javadocJar task to package up the javadoc and add it to the publications'
            tags = ['nebula', 'publish', 'javadoc']
        }

        sourceJar {
            id = 'nebula.source-jar'
            displayName = 'Nebula Source Jar Publishing plugin'
            description = 'Create a sourceJar task to package up the project\'s source code and add it to the publications'
            tags = ['nebula', 'publish', 'source']
        }

        testJar {
            id = 'nebula.test-jar'
            displayName = 'Nebula Test Jar Publishing plugin'
            description = 'Create a testJar task to package up test classes and add it to the publications'
            tags = ['nebula', 'publish', 'test']
        }
    }

    mavenCoordinates {
        groupId = 'com.netflix.nebula'
        artifactId = 'nebula-publishing-plugin'
    }
}

task sourceJar(type: Jar) {
    dependsOn tasks.classes
    from sourceSets.main.allSource
    classifier 'sources'
    extension 'jar'
    group 'build'
}

task javadocJar(type: Jar) {
    dependsOn tasks.javadoc
    from tasks.javadoc.destinationDir
    classifier 'javadoc'
    extension 'jar'
    group 'build'
}

task groovydocJar(type: Jar) {
    dependsOn tasks.groovydoc
    from tasks.groovydoc.destinationDir
    classifier 'groovydoc'
    extension 'jar'
    group 'build'
}

publishing {
    publications {
        mavenNebula(MavenPublication) {
            from components.java
            artifact tasks.sourceJar
            artifact tasks.javadocJar
            artifact tasks.groovydocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                def pomProperties = root.appendNode('properties')
                pomProperties.appendNode('nebula_Manifest_Version', '1.0')
                pomProperties.appendNode('nebula_Implementation_Title', "${project.group}:${project.name}:${project.version}")
                pomProperties.appendNode('nebula_Implementation_Version', project.version)
                pomProperties.appendNode('nebula_Build_Date', new Date().format('yyyy-MM-dd_HH:mm:ss'))
                pomProperties.appendNode('nebula_Created_By', "${System.getProperty('java.runtime.version')} (${System.getProperty('java.vm.specification.vendor')})")
                pomProperties.appendNode('nebula_Build_Java_Version', System.getProperty('java.version'))
                pomProperties.appendNode('nebula_X_Compile_Target_JDK', project.targetCompatibility)
                pomProperties.appendNode('nebula_X_Compile_Source_JDK', project.sourceCompatibility)
                root.appendNode('url', 'https://github.com/nebula-plugins/nebula-publishing-plugin')
                root.appendNode('scm').appendNode('url', 'https://github.com/nebula-plugins/nebula-publishing-plugin.git')
                def devs = root.appendNode('developers')
                def rob = devs.appendNode('developer')
                rob.appendNode('id', 'rspieldenner')
                rob.appendNode('name', 'Rob Spieldenner')
                rob.appendNode('email', 'rob.spieldenner@gmail.com')
                def justin = devs.appendNode('developer')
                justin.appendNode('id', 'quidryan')
                justin.appendNode('name', 'Justin Ryan')
                justin.appendNode('email', 'justin@halfempty.org')
                def apache = root.appendNode('licenses').appendNode('license')
                apache.appendNode('name', 'The Apache Software License, Version 2.0')
                apache.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                apache.appendNode('distribution', 'repo')
            }
        }
    }
}

// Wire up build and publishing process
project.tasks.getByName('verifyReleaseStatus').actions.clear()
project.tasks.getByName('verifySnapshotStatus').actions.clear()

tasks.matching { it.name == 'bintrayUpload' || it.name == 'artifactoryPublish'}.all { Task task ->
    task.mustRunAfter('build')
    tasks.release.dependsOn(task)
}

tasks.matching { it.name == 'bintrayUpload' }.all { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':final') || graph.hasTask(':candidate')
        }
    }
}

project.tasks.matching { it.name == 'artifactoryPublish'}.all { Task task ->
    project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
        task.onlyIf {
            graph.hasTask(':snapshot')
        }
    }
}

import org.ajoberstar.gradle.git.release.base.ReleasePluginExtension
ReleasePluginExtension releaseExtension = project.extensions.findByType(ReleasePluginExtension)
releaseExtension.with {
    defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

if (project.hasProperty('release.travisci') && project.property('release.travisci').toBoolean()) {
    project.tasks.release.deleteAllActions()
    project.tasks.prepare.deleteAllActions()
    nebulaRelease {
        addReleaseBranchPattern(/HEAD/)
        addReleaseBranchPattern(/v?\d+\.\d+\.\d+/)
        addReleaseBranchPattern(/gradle-\d+\.\d+/)
    }
}

gradleTest {
    versions '2.2.1', '2.3', '2.4', '2.5', '2.6', '2.7-rc-1'
}

gradleTest.dependsOn(jar)
gradleTest.doFirst {
    project.version = project.version.toString()
}
